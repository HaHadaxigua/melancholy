// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/HaHadaxigua/melancholy/ent/exitlog"
	"github.com/HaHadaxigua/melancholy/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ExitLogUpdate is the builder for updating ExitLog entities.
type ExitLogUpdate struct {
	config
	hooks    []Hook
	mutation *ExitLogMutation
}

// Where adds a new predicate for the builder.
func (elu *ExitLogUpdate) Where(ps ...predicate.ExitLog) *ExitLogUpdate {
	elu.mutation.predicates = append(elu.mutation.predicates, ps...)
	return elu
}

// SetUserID sets the user_id field.
func (elu *ExitLogUpdate) SetUserID(i int) *ExitLogUpdate {
	elu.mutation.ResetUserID()
	elu.mutation.SetUserID(i)
	return elu
}

// AddUserID adds i to user_id.
func (elu *ExitLogUpdate) AddUserID(i int) *ExitLogUpdate {
	elu.mutation.AddUserID(i)
	return elu
}

// SetToken sets the token field.
func (elu *ExitLogUpdate) SetToken(s string) *ExitLogUpdate {
	elu.mutation.SetToken(s)
	return elu
}

// Mutation returns the ExitLogMutation object of the builder.
func (elu *ExitLogUpdate) Mutation() *ExitLogMutation {
	return elu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *ExitLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(elu.hooks) == 0 {
		affected, err = elu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExitLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			elu.mutation = mutation
			affected, err = elu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(elu.hooks) - 1; i >= 0; i-- {
			mut = elu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (elu *ExitLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *ExitLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *ExitLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (elu *ExitLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exitlog.Table,
			Columns: exitlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exitlog.FieldID,
			},
		},
	}
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exitlog.FieldUserID,
		})
	}
	if value, ok := elu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exitlog.FieldUserID,
		})
	}
	if value, ok := elu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exitlog.FieldToken,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exitlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ExitLogUpdateOne is the builder for updating a single ExitLog entity.
type ExitLogUpdateOne struct {
	config
	hooks    []Hook
	mutation *ExitLogMutation
}

// SetUserID sets the user_id field.
func (eluo *ExitLogUpdateOne) SetUserID(i int) *ExitLogUpdateOne {
	eluo.mutation.ResetUserID()
	eluo.mutation.SetUserID(i)
	return eluo
}

// AddUserID adds i to user_id.
func (eluo *ExitLogUpdateOne) AddUserID(i int) *ExitLogUpdateOne {
	eluo.mutation.AddUserID(i)
	return eluo
}

// SetToken sets the token field.
func (eluo *ExitLogUpdateOne) SetToken(s string) *ExitLogUpdateOne {
	eluo.mutation.SetToken(s)
	return eluo
}

// Mutation returns the ExitLogMutation object of the builder.
func (eluo *ExitLogUpdateOne) Mutation() *ExitLogMutation {
	return eluo.mutation
}

// Save executes the query and returns the updated entity.
func (eluo *ExitLogUpdateOne) Save(ctx context.Context) (*ExitLog, error) {
	var (
		err  error
		node *ExitLog
	)
	if len(eluo.hooks) == 0 {
		node, err = eluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExitLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eluo.mutation = mutation
			node, err = eluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eluo.hooks) - 1; i >= 0; i-- {
			mut = eluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *ExitLogUpdateOne) SaveX(ctx context.Context) *ExitLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *ExitLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *ExitLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eluo *ExitLogUpdateOne) sqlSave(ctx context.Context) (_node *ExitLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exitlog.Table,
			Columns: exitlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exitlog.FieldID,
			},
		},
	}
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ExitLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := eluo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exitlog.FieldUserID,
		})
	}
	if value, ok := eluo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exitlog.FieldUserID,
		})
	}
	if value, ok := eluo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exitlog.FieldToken,
		})
	}
	_node = &ExitLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exitlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
