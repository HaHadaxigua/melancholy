// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/HaHadaxigua/melancholy/ent/exitlog"
	"github.com/facebook/ent/dialect/sql"
)

// ExitLog is the model entity for the ExitLog schema.
type ExitLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Date holds the value of the "date" field.
	Date          time.Time `json:"date,omitempty"`
	user_exitlogs *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExitLog) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // user_id
		&sql.NullString{}, // token
		&sql.NullTime{},   // date
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ExitLog) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_exitlogs
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExitLog fields.
func (el *ExitLog) assignValues(values ...interface{}) error {
	if m, n := len(values), len(exitlog.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	el.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field user_id", values[0])
	} else if value.Valid {
		el.UserID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field token", values[1])
	} else if value.Valid {
		el.Token = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[2])
	} else if value.Valid {
		el.Date = value.Time
	}
	values = values[3:]
	if len(values) == len(exitlog.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_exitlogs", value)
		} else if value.Valid {
			el.user_exitlogs = new(int)
			*el.user_exitlogs = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this ExitLog.
// Note that, you need to call ExitLog.Unwrap() before calling this method, if this ExitLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (el *ExitLog) Update() *ExitLogUpdateOne {
	return (&ExitLogClient{config: el.config}).UpdateOne(el)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (el *ExitLog) Unwrap() *ExitLog {
	tx, ok := el.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExitLog is not a transactional entity")
	}
	el.config.driver = tx.drv
	return el
}

// String implements the fmt.Stringer.
func (el *ExitLog) String() string {
	var builder strings.Builder
	builder.WriteString("ExitLog(")
	builder.WriteString(fmt.Sprintf("id=%v", el.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", el.UserID))
	builder.WriteString(", token=")
	builder.WriteString(el.Token)
	builder.WriteString(", date=")
	builder.WriteString(el.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ExitLogs is a parsable slice of ExitLog.
type ExitLogs []*ExitLog

func (el ExitLogs) config(cfg config) {
	for _i := range el {
		el[_i].config = cfg
	}
}
