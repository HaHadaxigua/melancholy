// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/HaHadaxigua/melancholy/ent/folder"
	"github.com/HaHadaxigua/melancholy/ent/mfile"
	"github.com/facebook/ent/dialect/sql"
)

// MFile is the model entity for the MFile schema.
type MFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Parent holds the value of the "parent" field.
	Parent int `json:"parent,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Author holds the value of the "author" field.
	Author int `json:"author,omitempty"`
	// Md5 holds the value of the "md5" field.
	Md5 int `json:"md5,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Status holds the value of the "status" field.
	Status mfile.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MFileQuery when eager-loading is set.
	Edges         MFileEdges `json:"edges"`
	folder_mfiles *int
}

// MFileEdges holds the relations/edges for other nodes in the graph.
type MFileEdges struct {
	// Folder holds the value of the folder edge.
	Folder *Folder
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FolderOrErr returns the Folder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MFileEdges) FolderOrErr() (*Folder, error) {
	if e.loadedTypes[0] {
		if e.Folder == nil {
			// The edge folder was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: folder.Label}
		}
		return e.Folder, nil
	}
	return nil, &NotLoadedError{edge: "folder"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MFile) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // parent
		&sql.NullString{}, // name
		&sql.NullInt64{},  // author
		&sql.NullInt64{},  // md5
		&sql.NullInt64{},  // size
		&sql.NullString{}, // desc
		&sql.NullString{}, // status
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullTime{},   // deleted_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*MFile) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // folder_mfiles
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MFile fields.
func (m *MFile) assignValues(values ...interface{}) error {
	if m, n := len(values), len(mfile.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field parent", values[0])
	} else if value.Valid {
		m.Parent = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[1])
	} else if value.Valid {
		m.Name = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field author", values[2])
	} else if value.Valid {
		m.Author = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field md5", values[3])
	} else if value.Valid {
		m.Md5 = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field size", values[4])
	} else if value.Valid {
		m.Size = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field desc", values[5])
	} else if value.Valid {
		m.Desc = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[6])
	} else if value.Valid {
		m.Status = mfile.Status(value.String)
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[7])
	} else if value.Valid {
		m.CreatedAt = value.Time
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[8])
	} else if value.Valid {
		m.UpdatedAt = value.Time
	}
	if value, ok := values[9].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deleted_at", values[9])
	} else if value.Valid {
		m.DeletedAt = new(time.Time)
		*m.DeletedAt = value.Time
	}
	values = values[10:]
	if len(values) == len(mfile.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field folder_mfiles", value)
		} else if value.Valid {
			m.folder_mfiles = new(int)
			*m.folder_mfiles = int(value.Int64)
		}
	}
	return nil
}

// QueryFolder queries the folder edge of the MFile.
func (m *MFile) QueryFolder() *FolderQuery {
	return (&MFileClient{config: m.config}).QueryFolder(m)
}

// Update returns a builder for updating this MFile.
// Note that, you need to call MFile.Unwrap() before calling this method, if this MFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *MFile) Update() *MFileUpdateOne {
	return (&MFileClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *MFile) Unwrap() *MFile {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: MFile is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *MFile) String() string {
	var builder strings.Builder
	builder.WriteString("MFile(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", parent=")
	builder.WriteString(fmt.Sprintf("%v", m.Parent))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", author=")
	builder.WriteString(fmt.Sprintf("%v", m.Author))
	builder.WriteString(", md5=")
	builder.WriteString(fmt.Sprintf("%v", m.Md5))
	builder.WriteString(", size=")
	builder.WriteString(fmt.Sprintf("%v", m.Size))
	builder.WriteString(", desc=")
	builder.WriteString(m.Desc)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	if v := m.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MFiles is a parsable slice of MFile.
type MFiles []*MFile

func (m MFiles) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
