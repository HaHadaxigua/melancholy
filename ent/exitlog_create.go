// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/HaHadaxigua/melancholy/ent/exitlog"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ExitLogCreate is the builder for creating a ExitLog entity.
type ExitLogCreate struct {
	config
	mutation *ExitLogMutation
	hooks    []Hook
}

// SetUserID sets the user_id field.
func (elc *ExitLogCreate) SetUserID(i int) *ExitLogCreate {
	elc.mutation.SetUserID(i)
	return elc
}

// SetToken sets the token field.
func (elc *ExitLogCreate) SetToken(s string) *ExitLogCreate {
	elc.mutation.SetToken(s)
	return elc
}

// SetDate sets the date field.
func (elc *ExitLogCreate) SetDate(t time.Time) *ExitLogCreate {
	elc.mutation.SetDate(t)
	return elc
}

// SetNillableDate sets the date field if the given value is not nil.
func (elc *ExitLogCreate) SetNillableDate(t *time.Time) *ExitLogCreate {
	if t != nil {
		elc.SetDate(*t)
	}
	return elc
}

// SetID sets the id field.
func (elc *ExitLogCreate) SetID(i int) *ExitLogCreate {
	elc.mutation.SetID(i)
	return elc
}

// Mutation returns the ExitLogMutation object of the builder.
func (elc *ExitLogCreate) Mutation() *ExitLogMutation {
	return elc.mutation
}

// Save creates the ExitLog in the database.
func (elc *ExitLogCreate) Save(ctx context.Context) (*ExitLog, error) {
	var (
		err  error
		node *ExitLog
	)
	elc.defaults()
	if len(elc.hooks) == 0 {
		if err = elc.check(); err != nil {
			return nil, err
		}
		node, err = elc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExitLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = elc.check(); err != nil {
				return nil, err
			}
			elc.mutation = mutation
			node, err = elc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(elc.hooks) - 1; i >= 0; i-- {
			mut = elc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (elc *ExitLogCreate) SaveX(ctx context.Context) *ExitLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (elc *ExitLogCreate) defaults() {
	if _, ok := elc.mutation.Date(); !ok {
		v := exitlog.DefaultDate()
		elc.mutation.SetDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *ExitLogCreate) check() error {
	if _, ok := elc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := elc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New("ent: missing required field \"token\"")}
	}
	if _, ok := elc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	return nil
}

func (elc *ExitLogCreate) sqlSave(ctx context.Context) (*ExitLog, error) {
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (elc *ExitLogCreate) createSpec() (*ExitLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ExitLog{config: elc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: exitlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exitlog.FieldID,
			},
		}
	)
	if id, ok := elc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := elc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exitlog.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := elc.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exitlog.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := elc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exitlog.FieldDate,
		})
		_node.Date = value
	}
	return _node, _spec
}

// ExitLogCreateBulk is the builder for creating a bulk of ExitLog entities.
type ExitLogCreateBulk struct {
	config
	builders []*ExitLogCreate
}

// Save creates the ExitLog entities in the database.
func (elcb *ExitLogCreateBulk) Save(ctx context.Context) ([]*ExitLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*ExitLog, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExitLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (elcb *ExitLogCreateBulk) SaveX(ctx context.Context) []*ExitLog {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
