// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/HaHadaxigua/melancholy/ent/folder"
	"github.com/facebook/ent/dialect/sql"
)

// Folder is the model entity for the Folder schema.
type Folder struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Parent holds the value of the "parent" field.
	Parent int `json:"parent,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner int `json:"owner,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Status holds the value of the "status" field.
	Status folder.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FolderQuery when eager-loading is set.
	Edges    FolderEdges `json:"edges"`
	folder_c *int
}

// FolderEdges holds the relations/edges for other nodes in the graph.
type FolderEdges struct {
	// Mfiles holds the value of the mfiles edge.
	Mfiles []*MFile
	// P holds the value of the p edge.
	P *Folder
	// C holds the value of the c edge.
	C []*Folder
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MfilesOrErr returns the Mfiles value or an error if the edge
// was not loaded in eager-loading.
func (e FolderEdges) MfilesOrErr() ([]*MFile, error) {
	if e.loadedTypes[0] {
		return e.Mfiles, nil
	}
	return nil, &NotLoadedError{edge: "mfiles"}
}

// POrErr returns the P value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FolderEdges) POrErr() (*Folder, error) {
	if e.loadedTypes[1] {
		if e.P == nil {
			// The edge p was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: folder.Label}
		}
		return e.P, nil
	}
	return nil, &NotLoadedError{edge: "p"}
}

// COrErr returns the C value or an error if the edge
// was not loaded in eager-loading.
func (e FolderEdges) COrErr() ([]*Folder, error) {
	if e.loadedTypes[2] {
		return e.C, nil
	}
	return nil, &NotLoadedError{edge: "c"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Folder) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // parent
		&sql.NullString{}, // name
		&sql.NullInt64{},  // owner
		&sql.NullInt64{},  // size
		&sql.NullString{}, // status
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullTime{},   // deleted_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Folder) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // folder_c
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Folder fields.
func (f *Folder) assignValues(values ...interface{}) error {
	if m, n := len(values), len(folder.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field parent", values[0])
	} else if value.Valid {
		f.Parent = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[1])
	} else if value.Valid {
		f.Name = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field owner", values[2])
	} else if value.Valid {
		f.Owner = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field size", values[3])
	} else if value.Valid {
		f.Size = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[4])
	} else if value.Valid {
		f.Status = folder.Status(value.String)
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[5])
	} else if value.Valid {
		f.CreatedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[6])
	} else if value.Valid {
		f.UpdatedAt = value.Time
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deleted_at", values[7])
	} else if value.Valid {
		f.DeletedAt = new(time.Time)
		*f.DeletedAt = value.Time
	}
	values = values[8:]
	if len(values) == len(folder.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field folder_c", value)
		} else if value.Valid {
			f.folder_c = new(int)
			*f.folder_c = int(value.Int64)
		}
	}
	return nil
}

// QueryMfiles queries the mfiles edge of the Folder.
func (f *Folder) QueryMfiles() *MFileQuery {
	return (&FolderClient{config: f.config}).QueryMfiles(f)
}

// QueryP queries the p edge of the Folder.
func (f *Folder) QueryP() *FolderQuery {
	return (&FolderClient{config: f.config}).QueryP(f)
}

// QueryC queries the c edge of the Folder.
func (f *Folder) QueryC() *FolderQuery {
	return (&FolderClient{config: f.config}).QueryC(f)
}

// Update returns a builder for updating this Folder.
// Note that, you need to call Folder.Unwrap() before calling this method, if this Folder
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Folder) Update() *FolderUpdateOne {
	return (&FolderClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Folder) Unwrap() *Folder {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Folder is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Folder) String() string {
	var builder strings.Builder
	builder.WriteString("Folder(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", parent=")
	builder.WriteString(fmt.Sprintf("%v", f.Parent))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", owner=")
	builder.WriteString(fmt.Sprintf("%v", f.Owner))
	builder.WriteString(", size=")
	builder.WriteString(fmt.Sprintf("%v", f.Size))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", f.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	if v := f.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Folders is a parsable slice of Folder.
type Folders []*Folder

func (f Folders) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
