// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/HaHadaxigua/melancholy/ent/folder"
	"github.com/HaHadaxigua/melancholy/ent/mfile"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// FolderCreate is the builder for creating a Folder entity.
type FolderCreate struct {
	config
	mutation *FolderMutation
	hooks    []Hook
}

// SetParent sets the parent field.
func (fc *FolderCreate) SetParent(i int) *FolderCreate {
	fc.mutation.SetParent(i)
	return fc
}

// SetPath sets the path field.
func (fc *FolderCreate) SetPath(s string) *FolderCreate {
	fc.mutation.SetPath(s)
	return fc
}

// SetName sets the name field.
func (fc *FolderCreate) SetName(s string) *FolderCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetAuthor sets the author field.
func (fc *FolderCreate) SetAuthor(i int) *FolderCreate {
	fc.mutation.SetAuthor(i)
	return fc
}

// SetSize sets the size field.
func (fc *FolderCreate) SetSize(i int) *FolderCreate {
	fc.mutation.SetSize(i)
	return fc
}

// SetNillableSize sets the size field if the given value is not nil.
func (fc *FolderCreate) SetNillableSize(i *int) *FolderCreate {
	if i != nil {
		fc.SetSize(*i)
	}
	return fc
}

// SetStatus sets the status field.
func (fc *FolderCreate) SetStatus(f folder.Status) *FolderCreate {
	fc.mutation.SetStatus(f)
	return fc
}

// SetNillableStatus sets the status field if the given value is not nil.
func (fc *FolderCreate) SetNillableStatus(f *folder.Status) *FolderCreate {
	if f != nil {
		fc.SetStatus(*f)
	}
	return fc
}

// SetCreatedAt sets the created_at field.
func (fc *FolderCreate) SetCreatedAt(t time.Time) *FolderCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (fc *FolderCreate) SetNillableCreatedAt(t *time.Time) *FolderCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the updated_at field.
func (fc *FolderCreate) SetUpdatedAt(t time.Time) *FolderCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (fc *FolderCreate) SetNillableUpdatedAt(t *time.Time) *FolderCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetDeletedAt sets the deleted_at field.
func (fc *FolderCreate) SetDeletedAt(t time.Time) *FolderCreate {
	fc.mutation.SetDeletedAt(t)
	return fc
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (fc *FolderCreate) SetNillableDeletedAt(t *time.Time) *FolderCreate {
	if t != nil {
		fc.SetDeletedAt(*t)
	}
	return fc
}

// SetID sets the id field.
func (fc *FolderCreate) SetID(i int) *FolderCreate {
	fc.mutation.SetID(i)
	return fc
}

// AddMfileIDs adds the mfiles edge to MFile by ids.
func (fc *FolderCreate) AddMfileIDs(ids ...int) *FolderCreate {
	fc.mutation.AddMfileIDs(ids...)
	return fc
}

// AddMfiles adds the mfiles edges to MFile.
func (fc *FolderCreate) AddMfiles(m ...*MFile) *FolderCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return fc.AddMfileIDs(ids...)
}

// SetPID sets the p edge to Folder by id.
func (fc *FolderCreate) SetPID(id int) *FolderCreate {
	fc.mutation.SetPID(id)
	return fc
}

// SetNillablePID sets the p edge to Folder by id if the given value is not nil.
func (fc *FolderCreate) SetNillablePID(id *int) *FolderCreate {
	if id != nil {
		fc = fc.SetPID(*id)
	}
	return fc
}

// SetP sets the p edge to Folder.
func (fc *FolderCreate) SetP(f *Folder) *FolderCreate {
	return fc.SetPID(f.ID)
}

// AddCIDs adds the c edge to Folder by ids.
func (fc *FolderCreate) AddCIDs(ids ...int) *FolderCreate {
	fc.mutation.AddCIDs(ids...)
	return fc
}

// AddC adds the c edges to Folder.
func (fc *FolderCreate) AddC(f ...*Folder) *FolderCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddCIDs(ids...)
}

// Mutation returns the FolderMutation object of the builder.
func (fc *FolderCreate) Mutation() *FolderMutation {
	return fc.mutation
}

// Save creates the Folder in the database.
func (fc *FolderCreate) Save(ctx context.Context) (*Folder, error) {
	var (
		err  error
		node *Folder
	)
	fc.defaults()
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FolderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			node, err = fc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FolderCreate) SaveX(ctx context.Context) *Folder {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (fc *FolderCreate) defaults() {
	if _, ok := fc.mutation.Size(); !ok {
		v := folder.DefaultSize
		fc.mutation.SetSize(v)
	}
	if _, ok := fc.mutation.Status(); !ok {
		v := folder.DefaultStatus
		fc.mutation.SetStatus(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := folder.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := folder.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FolderCreate) check() error {
	if _, ok := fc.mutation.Parent(); !ok {
		return &ValidationError{Name: "parent", err: errors.New("ent: missing required field \"parent\"")}
	}
	if _, ok := fc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New("ent: missing required field \"path\"")}
	}
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := fc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New("ent: missing required field \"author\"")}
	}
	if _, ok := fc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := fc.mutation.Status(); ok {
		if err := folder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (fc *FolderCreate) sqlSave(ctx context.Context) (*Folder, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (fc *FolderCreate) createSpec() (*Folder, *sqlgraph.CreateSpec) {
	var (
		_node = &Folder{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: folder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: folder.FieldID,
			},
		}
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Parent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: folder.FieldParent,
		})
		_node.Parent = value
	}
	if value, ok := fc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: folder.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: folder.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fc.mutation.Author(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: folder.FieldAuthor,
		})
		_node.Author = value
	}
	if value, ok := fc.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: folder.FieldSize,
		})
		_node.Size = value
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: folder.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: folder.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: folder.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: folder.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := fc.mutation.MfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   folder.MfilesTable,
			Columns: []string{folder.MfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.PIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   folder.PTable,
			Columns: []string{folder.PColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: folder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.CIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   folder.CTable,
			Columns: []string{folder.CColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: folder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FolderCreateBulk is the builder for creating a bulk of Folder entities.
type FolderCreateBulk struct {
	config
	builders []*FolderCreate
}

// Save creates the Folder entities in the database.
func (fcb *FolderCreateBulk) Save(ctx context.Context) ([]*Folder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Folder, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FolderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (fcb *FolderCreateBulk) SaveX(ctx context.Context) []*Folder {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
