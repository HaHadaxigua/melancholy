// Code generated by entc, DO NOT EDIT.

package mfile

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the mfile type in the database.
	Label = "mfile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldParent holds the string denoting the parent field in the database.
	FieldParent = "parent"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldMd5 holds the string denoting the md5 field in the database.
	FieldMd5 = "md5"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldMType holds the string denoting the mtype field in the database.
	FieldMType = "mtype"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"

	// EdgeFolder holds the string denoting the folder edge name in mutations.
	EdgeFolder = "folder"

	// Table holds the table name of the mfile in the database.
	Table = "mfiles"
	// FolderTable is the table the holds the folder relation/edge.
	FolderTable = "mfiles"
	// FolderInverseTable is the table name for the Folder entity.
	// It exists in this package in order to avoid circular dependency with the "folder" package.
	FolderInverseTable = "folders"
	// FolderColumn is the table column denoting the folder relation/edge.
	FolderColumn = "folder_mfiles"
)

// Columns holds all SQL columns for mfile fields.
var Columns = []string{
	FieldID,
	FieldParent,
	FieldName,
	FieldAuthor,
	FieldMd5,
	FieldSize,
	FieldMType,
	FieldDesc,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the MFile type.
var ForeignKeys = []string{
	"folder_mfiles",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSize holds the default value on creation for the size field.
	DefaultSize int
	// DefaultDesc holds the default value on creation for the desc field.
	DefaultDesc string
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)

// MType defines the type for the MType enum field.
type MType string

// MType0 is the default MType.
const DefaultMType = MType0

// MType values.
const (
	MType0  MType = "0"
	MType10 MType = "10"
	MType20 MType = "20"
)

func (_mtype MType) String() string {
	return string(_mtype)
}

// MTypeValidator is a validator for the "MType" field enum values. It is called by the builders before save.
func MTypeValidator(_mtype MType) error {
	switch _mtype {
	case MType0, MType10, MType20:
		return nil
	default:
		return fmt.Errorf("mfile: invalid enum value for MType field: %q", _mtype)
	}
}

// Status defines the type for the status enum field.
type Status string

// Status0 is the default Status.
const DefaultStatus = Status0

// Status values.
const (
	Status0  Status = "0"
	Status10 Status = "10"
	Status20 Status = "20"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case Status0, Status10, Status20:
		return nil
	default:
		return fmt.Errorf("mfile: invalid enum value for status field: %q", s)
	}
}
