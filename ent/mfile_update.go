// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/HaHadaxigua/melancholy/ent/folder"
	"github.com/HaHadaxigua/melancholy/ent/mfile"
	"github.com/HaHadaxigua/melancholy/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MFileUpdate is the builder for updating MFile entities.
type MFileUpdate struct {
	config
	hooks    []Hook
	mutation *MFileMutation
}

// Where adds a new predicate for the builder.
func (mu *MFileUpdate) Where(ps ...predicate.MFile) *MFileUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetParent sets the parent field.
func (mu *MFileUpdate) SetParent(i int) *MFileUpdate {
	mu.mutation.ResetParent()
	mu.mutation.SetParent(i)
	return mu
}

// AddParent adds i to parent.
func (mu *MFileUpdate) AddParent(i int) *MFileUpdate {
	mu.mutation.AddParent(i)
	return mu
}

// SetName sets the name field.
func (mu *MFileUpdate) SetName(s string) *MFileUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetAuthor sets the author field.
func (mu *MFileUpdate) SetAuthor(i int) *MFileUpdate {
	mu.mutation.ResetAuthor()
	mu.mutation.SetAuthor(i)
	return mu
}

// AddAuthor adds i to author.
func (mu *MFileUpdate) AddAuthor(i int) *MFileUpdate {
	mu.mutation.AddAuthor(i)
	return mu
}

// SetMd5 sets the md5 field.
func (mu *MFileUpdate) SetMd5(i int) *MFileUpdate {
	mu.mutation.ResetMd5()
	mu.mutation.SetMd5(i)
	return mu
}

// AddMd5 adds i to md5.
func (mu *MFileUpdate) AddMd5(i int) *MFileUpdate {
	mu.mutation.AddMd5(i)
	return mu
}

// SetSize sets the size field.
func (mu *MFileUpdate) SetSize(i int) *MFileUpdate {
	mu.mutation.ResetSize()
	mu.mutation.SetSize(i)
	return mu
}

// SetNillableSize sets the size field if the given value is not nil.
func (mu *MFileUpdate) SetNillableSize(i *int) *MFileUpdate {
	if i != nil {
		mu.SetSize(*i)
	}
	return mu
}

// AddSize adds i to size.
func (mu *MFileUpdate) AddSize(i int) *MFileUpdate {
	mu.mutation.AddSize(i)
	return mu
}

// ClearSize clears the value of size.
func (mu *MFileUpdate) ClearSize() *MFileUpdate {
	mu.mutation.ClearSize()
	return mu
}

// SetMType sets the MType field.
func (mu *MFileUpdate) SetMType(mt mfile.MType) *MFileUpdate {
	mu.mutation.SetMType(mt)
	return mu
}

// SetNillableMType sets the MType field if the given value is not nil.
func (mu *MFileUpdate) SetNillableMType(mt *mfile.MType) *MFileUpdate {
	if mt != nil {
		mu.SetMType(*mt)
	}
	return mu
}

// SetDesc sets the desc field.
func (mu *MFileUpdate) SetDesc(s string) *MFileUpdate {
	mu.mutation.SetDesc(s)
	return mu
}

// SetNillableDesc sets the desc field if the given value is not nil.
func (mu *MFileUpdate) SetNillableDesc(s *string) *MFileUpdate {
	if s != nil {
		mu.SetDesc(*s)
	}
	return mu
}

// ClearDesc clears the value of desc.
func (mu *MFileUpdate) ClearDesc() *MFileUpdate {
	mu.mutation.ClearDesc()
	return mu
}

// SetStatus sets the status field.
func (mu *MFileUpdate) SetStatus(m mfile.Status) *MFileUpdate {
	mu.mutation.SetStatus(m)
	return mu
}

// SetNillableStatus sets the status field if the given value is not nil.
func (mu *MFileUpdate) SetNillableStatus(m *mfile.Status) *MFileUpdate {
	if m != nil {
		mu.SetStatus(*m)
	}
	return mu
}

// SetUpdatedAt sets the updated_at field.
func (mu *MFileUpdate) SetUpdatedAt(t time.Time) *MFileUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the deleted_at field.
func (mu *MFileUpdate) SetDeletedAt(t time.Time) *MFileUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (mu *MFileUpdate) SetNillableDeletedAt(t *time.Time) *MFileUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of deleted_at.
func (mu *MFileUpdate) ClearDeletedAt() *MFileUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetFolderID sets the folder edge to Folder by id.
func (mu *MFileUpdate) SetFolderID(id int) *MFileUpdate {
	mu.mutation.SetFolderID(id)
	return mu
}

// SetNillableFolderID sets the folder edge to Folder by id if the given value is not nil.
func (mu *MFileUpdate) SetNillableFolderID(id *int) *MFileUpdate {
	if id != nil {
		mu = mu.SetFolderID(*id)
	}
	return mu
}

// SetFolder sets the folder edge to Folder.
func (mu *MFileUpdate) SetFolder(f *Folder) *MFileUpdate {
	return mu.SetFolderID(f.ID)
}

// Mutation returns the MFileMutation object of the builder.
func (mu *MFileUpdate) Mutation() *MFileMutation {
	return mu.mutation
}

// ClearFolder clears the "folder" edge to type Folder.
func (mu *MFileUpdate) ClearFolder() *MFileUpdate {
	mu.mutation.ClearFolder()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MFileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MFileUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MFileUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MFileUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MFileUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := mfile.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MFileUpdate) check() error {
	if v, ok := mu.mutation.MType(); ok {
		if err := mfile.MTypeValidator(v); err != nil {
			return &ValidationError{Name: "MType", err: fmt.Errorf("ent: validator failed for field \"MType\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Status(); ok {
		if err := mfile.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (mu *MFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mfile.Table,
			Columns: mfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mfile.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Parent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldParent,
		})
	}
	if value, ok := mu.mutation.AddedParent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldParent,
		})
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mfile.FieldName,
		})
	}
	if value, ok := mu.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldAuthor,
		})
	}
	if value, ok := mu.mutation.AddedAuthor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldAuthor,
		})
	}
	if value, ok := mu.mutation.Md5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldMd5,
		})
	}
	if value, ok := mu.mutation.AddedMd5(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldMd5,
		})
	}
	if value, ok := mu.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldSize,
		})
	}
	if value, ok := mu.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldSize,
		})
	}
	if mu.mutation.SizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: mfile.FieldSize,
		})
	}
	if value, ok := mu.mutation.MType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mfile.FieldMType,
		})
	}
	if value, ok := mu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mfile.FieldDesc,
		})
	}
	if mu.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mfile.FieldDesc,
		})
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mfile.FieldStatus,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mfile.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mfile.FieldDeletedAt,
		})
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: mfile.FieldDeletedAt,
		})
	}
	if mu.mutation.FolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfile.FolderTable,
			Columns: []string{mfile.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: folder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.FolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfile.FolderTable,
			Columns: []string{mfile.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: folder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mfile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MFileUpdateOne is the builder for updating a single MFile entity.
type MFileUpdateOne struct {
	config
	hooks    []Hook
	mutation *MFileMutation
}

// SetParent sets the parent field.
func (muo *MFileUpdateOne) SetParent(i int) *MFileUpdateOne {
	muo.mutation.ResetParent()
	muo.mutation.SetParent(i)
	return muo
}

// AddParent adds i to parent.
func (muo *MFileUpdateOne) AddParent(i int) *MFileUpdateOne {
	muo.mutation.AddParent(i)
	return muo
}

// SetName sets the name field.
func (muo *MFileUpdateOne) SetName(s string) *MFileUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetAuthor sets the author field.
func (muo *MFileUpdateOne) SetAuthor(i int) *MFileUpdateOne {
	muo.mutation.ResetAuthor()
	muo.mutation.SetAuthor(i)
	return muo
}

// AddAuthor adds i to author.
func (muo *MFileUpdateOne) AddAuthor(i int) *MFileUpdateOne {
	muo.mutation.AddAuthor(i)
	return muo
}

// SetMd5 sets the md5 field.
func (muo *MFileUpdateOne) SetMd5(i int) *MFileUpdateOne {
	muo.mutation.ResetMd5()
	muo.mutation.SetMd5(i)
	return muo
}

// AddMd5 adds i to md5.
func (muo *MFileUpdateOne) AddMd5(i int) *MFileUpdateOne {
	muo.mutation.AddMd5(i)
	return muo
}

// SetSize sets the size field.
func (muo *MFileUpdateOne) SetSize(i int) *MFileUpdateOne {
	muo.mutation.ResetSize()
	muo.mutation.SetSize(i)
	return muo
}

// SetNillableSize sets the size field if the given value is not nil.
func (muo *MFileUpdateOne) SetNillableSize(i *int) *MFileUpdateOne {
	if i != nil {
		muo.SetSize(*i)
	}
	return muo
}

// AddSize adds i to size.
func (muo *MFileUpdateOne) AddSize(i int) *MFileUpdateOne {
	muo.mutation.AddSize(i)
	return muo
}

// ClearSize clears the value of size.
func (muo *MFileUpdateOne) ClearSize() *MFileUpdateOne {
	muo.mutation.ClearSize()
	return muo
}

// SetMType sets the MType field.
func (muo *MFileUpdateOne) SetMType(mt mfile.MType) *MFileUpdateOne {
	muo.mutation.SetMType(mt)
	return muo
}

// SetNillableMType sets the MType field if the given value is not nil.
func (muo *MFileUpdateOne) SetNillableMType(mt *mfile.MType) *MFileUpdateOne {
	if mt != nil {
		muo.SetMType(*mt)
	}
	return muo
}

// SetDesc sets the desc field.
func (muo *MFileUpdateOne) SetDesc(s string) *MFileUpdateOne {
	muo.mutation.SetDesc(s)
	return muo
}

// SetNillableDesc sets the desc field if the given value is not nil.
func (muo *MFileUpdateOne) SetNillableDesc(s *string) *MFileUpdateOne {
	if s != nil {
		muo.SetDesc(*s)
	}
	return muo
}

// ClearDesc clears the value of desc.
func (muo *MFileUpdateOne) ClearDesc() *MFileUpdateOne {
	muo.mutation.ClearDesc()
	return muo
}

// SetStatus sets the status field.
func (muo *MFileUpdateOne) SetStatus(m mfile.Status) *MFileUpdateOne {
	muo.mutation.SetStatus(m)
	return muo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (muo *MFileUpdateOne) SetNillableStatus(m *mfile.Status) *MFileUpdateOne {
	if m != nil {
		muo.SetStatus(*m)
	}
	return muo
}

// SetUpdatedAt sets the updated_at field.
func (muo *MFileUpdateOne) SetUpdatedAt(t time.Time) *MFileUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the deleted_at field.
func (muo *MFileUpdateOne) SetDeletedAt(t time.Time) *MFileUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the deleted_at field if the given value is not nil.
func (muo *MFileUpdateOne) SetNillableDeletedAt(t *time.Time) *MFileUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of deleted_at.
func (muo *MFileUpdateOne) ClearDeletedAt() *MFileUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetFolderID sets the folder edge to Folder by id.
func (muo *MFileUpdateOne) SetFolderID(id int) *MFileUpdateOne {
	muo.mutation.SetFolderID(id)
	return muo
}

// SetNillableFolderID sets the folder edge to Folder by id if the given value is not nil.
func (muo *MFileUpdateOne) SetNillableFolderID(id *int) *MFileUpdateOne {
	if id != nil {
		muo = muo.SetFolderID(*id)
	}
	return muo
}

// SetFolder sets the folder edge to Folder.
func (muo *MFileUpdateOne) SetFolder(f *Folder) *MFileUpdateOne {
	return muo.SetFolderID(f.ID)
}

// Mutation returns the MFileMutation object of the builder.
func (muo *MFileUpdateOne) Mutation() *MFileMutation {
	return muo.mutation
}

// ClearFolder clears the "folder" edge to type Folder.
func (muo *MFileUpdateOne) ClearFolder() *MFileUpdateOne {
	muo.mutation.ClearFolder()
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MFileUpdateOne) Save(ctx context.Context) (*MFile, error) {
	var (
		err  error
		node *MFile
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MFileUpdateOne) SaveX(ctx context.Context) *MFile {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MFileUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MFileUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MFileUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := mfile.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MFileUpdateOne) check() error {
	if v, ok := muo.mutation.MType(); ok {
		if err := mfile.MTypeValidator(v); err != nil {
			return &ValidationError{Name: "MType", err: fmt.Errorf("ent: validator failed for field \"MType\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Status(); ok {
		if err := mfile.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (muo *MFileUpdateOne) sqlSave(ctx context.Context) (_node *MFile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mfile.Table,
			Columns: mfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mfile.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MFile.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Parent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldParent,
		})
	}
	if value, ok := muo.mutation.AddedParent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldParent,
		})
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mfile.FieldName,
		})
	}
	if value, ok := muo.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldAuthor,
		})
	}
	if value, ok := muo.mutation.AddedAuthor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldAuthor,
		})
	}
	if value, ok := muo.mutation.Md5(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldMd5,
		})
	}
	if value, ok := muo.mutation.AddedMd5(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldMd5,
		})
	}
	if value, ok := muo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldSize,
		})
	}
	if value, ok := muo.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mfile.FieldSize,
		})
	}
	if muo.mutation.SizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: mfile.FieldSize,
		})
	}
	if value, ok := muo.mutation.MType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mfile.FieldMType,
		})
	}
	if value, ok := muo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mfile.FieldDesc,
		})
	}
	if muo.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: mfile.FieldDesc,
		})
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mfile.FieldStatus,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mfile.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mfile.FieldDeletedAt,
		})
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: mfile.FieldDeletedAt,
		})
	}
	if muo.mutation.FolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfile.FolderTable,
			Columns: []string{mfile.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: folder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.FolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mfile.FolderTable,
			Columns: []string{mfile.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: folder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MFile{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mfile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
